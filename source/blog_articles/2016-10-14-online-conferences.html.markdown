---
title: Online Conferences
date: 2016-10-14
tags: remote hangout webinarjam slack chat questions slides answers talks social
author: Sam Joseph
---

Gave my first ever talk at a remote online conference on Thursday.  It's been a while since I spoke at any kind of conference actually.  I used to give talks pretty regularly as an academic and running meet ups, but I've got out of the swing of it.  And giving a talk isn't coding, which is what I really want to be doing.  Although by the look of it most of my time is now taken up blogging devops and reviewing pull requests, but anyway.  I've given talks in SecondLife and I've been hosting online tutorials, remote pair programming and recording online lectures for students lots and lots over the last five years.  

So presenting for [Rails Remote Conf](https://allremoteconfs.com/rails-2016) was not such a huge difference.  It was a hangout and there was a separate custom chat app from webinarjam to take incoming questions and comments from the audience.  I'd done a fair amount of prep during the week, from sharing some [draft slides](https://dl.dropboxusercontent.com/u/13196858/RailsRemoteConf-OpenSourceRailsCharityProject-SamJoseph.pdf) with our core team, although looking back at it now and considering some of the other talks I saw at the conference I should have animated in the different bullets, or replaced all the text with images, and used the slides as speaker notes.  Next time I guess.

I was a little self-conscious that I wasn't deep diving on Rails tech, but conference organiser and host Charles Max Wood reassured me that he likes to have a couple of less technical talks in the conference, so I launched into the talk, trying to remind myself to speak slowly.  My bane.  I talk too fast.  Listening to lectures and podcasts on 2x doesn't help I'm sure, but it's been a problem since my youth.  I guess I am a gabbler.  Maybe the text on the talk slides was not such a bad idea.  If people couldn't understand my accent or pace of delivery, they could at least read the slides :-)

I got a few comments and questions during the talk, which like usual hangout chat appear to have been lost to the ether.  There was a question about how time-pressed project maintainers can manage lots of pull requests, and I responded with Pat Bolger's great points on my first draft about getting the whole team involved in the review of pull requests, and of course my big favourite, "small PRs".  There wasn't extensive questioning at the end, hopefully because what I had said was transparently clear rather than just unutterably dull :-) Reassuringly I had some positive feedback by email afterwards from one audience member after.

Despite the time zone difference I managed to catch a few of the other talks, which were pretty good.    [Phil Nash](https://twitter.com/philnash) spoke about two factor authentication, [Charles](https://twitter.com/cmaxw) about freelancing and [Nell Shamrell](http://nellshamrell.com/) about estimates that don't suck.  Nell had a particularly interesting deep dive slide where she took apart a user story in terms of the technical specifics and gave points to each of those elements:

![detailed tech estimate](https://www.dropbox.com/s/7kmkkxvqgl2zmrh/Screenshot%202016-10-14%2010.05.22.png?dl=1) 

The [full slides from Nell's talk](http://www.slideshare.net/NellShamrell/estimates-that-dont-suck) have even more.  That 44 points Nell gets for the user story are multiplied by some factor, and that gives a 66.  Which using a scale introduced earlier:

![points in days](https://www.dropbox.com/s/104oec3yghsk1im/Screenshot%202016-10-14%2010.07.14.png?dl=0) 

implies that this feature would take about 8 days.  I asked Nell whether there was a danger in over specifying the implementation of the feature here, and she said that that was a possibility and that many teams just stayed at the user story level.   I was interested in this lower level estimating process, and I could imagine how if you had a really serious pressure to deliver that, this would be a very useful process.  For our pro-bono charity projects at AgileVentures things take as long as they take, and the process of estimating is more about giving new developers a coherent idea of how long something might take, rather than giving higher ups information to make key business decisions, although we do need to do some of that as well.

I was probably too chatty in the limited chat after Nell's talk.  There was one other question from an audience member, and Charles mentioned an app for voting on estimates.  I was hoping to get more info on that since we're starting an AgileVentures project to build a tool for that.  The overall online conference format was fairly cool, but it was a shame to lose the chat history when each chat session shut down.  I would prefer a Slack instance for the conference where you could have a chat room for each talk that was persistent, and also some general hang-out rooms where people could continue conversations they had started in talk chats etc.

I wonder if we should do an AgileVentures conference at some point, and use our existing Slack instance to support the chat.  We've got all the infrastructure we need with our AV events and hangouts system ... would be great to get the project maintainers to each present on their projects, and get one or two devs to each also present on some of the work they've been doing on the project.  I'm always worried about meetings and conferences taking time away from coding, but maybe some sort of online conference is what we need for people to understand what we're all doing at AgileVentures?  I was also just listening to a podcast about Gitlab, which has 100's of purely remote employees, and how they have specific coffee-break, friendly chat hangouts.  Maybe AgileVentures needs more of these social get together things ...?
