---
title: Speeding Up Page Loading
date: 2016-08-30
tags: html javascript ruby rails performance profiling UX
author: Sam Joseph
---

Having got back from break Michael and I paired on improving the performance on the AgileVentures' user page.  Performance on the user page, also referred to as the members page, or volunteer directory, had been deteriorating for a while as it was set up to display all the users in the site in a single page.  This was fine when we had a hundred members, but as the membership number exceeded 2500, the page load was taking longer than 12 seconds to get the HTML up, and then a similar amount again to load all the user avatar images.

There's a rule of thumb that if your web page takes longer than seven seconds to load then whoever was trying to look at your page is now off somewhere else.  And that was the standard a while back and I think things need to be a lot faster these days.  There are [suggestions](http://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/) that you'll lose 25% of users if a site takes longer than 4 seconds to load, and Google will crawl your site slower if it takes more than 2 seconds to load.  So clearly our user page load times were a problem.  

This is perhaps another example of the [boiling frog issue](http://blog.agileventures.org/did-we-boil-a-frog/); the performance of the page slowly getting worse over time, and of course there being lots of other things to fix, features to add, business models to tweak etc.  However, having rolled out the new "Karma" feature where we rank our users in terms of their contributions to our open source charity projects, it was crystal clear we couldn't showcase our new functionality without improving the page load times. 

So the best approach to take?  I was in danger of getting distracted by the range of terminology in use related to the members page.  The page title itself is "Volunteers Directory", the URL is `http://www.agileventures.org/users`, the navigation tab that links to it is titled "members", and the database models all refer to users.  There's also mention of "Filter users by" in the page itself.  Domain Driven Design (DDD) tells us that we should try and consolidate on the key terms that are meaningful to our stakeholders, and then use them consistently throughout our system. I was half tempted to try and standardise our terminology.  It's funny though, because each of the terms "users", "members" and "volunteers" have different overtones and are more appropriate in certain situations.  In creative writing I have a rule of thumb to avoid using the same term too frequently, or too close together.  Is there a counter-argument that there's value from using a cluster of terms in order to provide more ways to relate to a concept, or is that just confusing?

Clearly that's a side-show compared to the more immediate problem of the page being slow to load.  Whatever the terminology, if the page takes 15 seconds to load, almost no one is going to look at it.  So then the question became, how do we speed up the page load?  Pagination seems the obvious answer.  We did spend some time profiling the page and seeing that the database query itself was pretty fast and that most of the 9 or so seconds of server activity was in the rendering of templates (i.e. string manipulation). This was helpfully reported in the Rails logs, and it seemed clear that merging the collection of users with the html templates was the main bottleneck.  Caching is a possibility here.  Rails has collection caching (a type of [fragment-caching](http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching)) that might work for us here with a few changes to our templates, but we'd pretty much settled on some form of pagination as the fastest and most reliable way to improve the situation.

I'm a big fan of infinite scroll to allow users a very simple experience of moving further on in a list of objects, and maybe we'll want that ultimately, but this was a bleed and seemed that we needed to get the absolutely simplest fix out fast and then we could come back around to consider other options.  We already had basic vanilla pagination in the projects page.  Ironically I remember that when it was implemented (and I was playing the role of non-technical customer) I said I'd have preferred it to have been infinite scroll, since at the time I was convinced that infinite scroll was fantastically better from a UX point of view.  I think I'd still like both of them to be infinite scroll; although another data-point is that one of our power-users said he prefers pagination because he can use the page-end key on his keyboard to jump to the last result ...

Anyway, the key thing here is get the simplest thing done and deployed in order to ensure that there aren't areas of complexity that you've overlooked, that will end up delaying the release of a quick fix.  Simple pagination with the [kaminari](https://github.com/amatsuda/kaminari) gem is what we went for, because that seemed more recently updated than the competing [will_paginate](https://github.com/mislav/will_paginate) gem; and there were also hints we could upgrade kaminari to infinite scroll easily.  We got kaminari working to discover our projects page was already using will_paginate.  Should we consolidate?  The work was done ... we pushed on.  The main issue that came up was that the JavaScript quick user filter in our users page now didn't work.  The JS filter would filter precisely what was in the page, i.e. it was relying on all the the users being displayed in a single page.  After some consideration we removed the functionality and the associated tests.  We spoke to a couple of users; we couldn't immediately find anyone for whom this functionality was important.  In order to move forward we took it out, and got a pull-request in for adding pagination to the users page.

CodeClimate pushed back on the complexity of our user controller's index method complexity, I refactored and followed [Raoul's](https://github.com/diraulo) suggestion to remove the commented quick filter code/tests.  Raoul pushed out the code to production this weekend and now you can see our users' page with simple pagination loading in under two seconds.  Thanks Raoul!  Just what the doctor ordered.  Check it out and see what your AgileVentures' ranking is:

[http://ww.agileventures.org/users](http://ww.agileventures.org/users)