---
title: Removing Custom Routes
date: 2016-12-14
tags: Rails controllers, pull requests, REST, CRUD, technical debt, refactoring
author: Sam Joseph
---

![routes](/images/routes.jpg)

In a day with little time for coding on WebsiteOne I think I made a bit of a breakthrough in terms of removing custom routes on Rails controllers.  Time got sucked away in the usual admin, reviewing pull requests, scrums and having Michael update me on the great work he and Arreche had done getting the Yada Cucumber setup working for AsyncVoter.  Interesting discussion there about whether we should switch tech stack and, if we don't, how we handle the rather raw test and mock architecture.  Also, should I be focusing more on infrastructure for the projects?  I'm still convinced I've got to prioritise getting AgileVentures into the black, and right now that means sorting out our payment frameworks.

The previous day Matt and I had spiked the PayPal redirection to our site after a successful payment, and using that base I was able to fill in the rest of the cucumber steps that Michael and I had sketched out the week previously:

```gherkin
Feature: Subscribe Self to Premium
  As a developer
  So that I can get recurring professsional development support and code review
  I would like to take out an AV Premium Subscription

  Background:
    Given the following plans exist
      | name        | id          |
      | Premium     | premium     |

  Scenario: Pay by card
    Given I visit "subscriptions/new"
    And I click "Subscribe" within the card_section
    When I fill in appropriate card details for premium
    Then I should see "Thanks, you're now an AgileVentures Premium Member!"
    And the user should receive a "Welcome to AgileVentures Premium" email
    
  Scenario: Pay by PayPal
    Given I visit "subscriptions/new"
    Then I should see a paypal form within the paypal_section
    When Paypal updates our endpoint
    Then the user should receive a "Welcome to AgileVentures Premium" email
    And I should see "Thanks, you're now an AgileVentures Premium Member!" in last_response
```

The key new elements were in the PayPal section, where I introduced a step to simulate the process initiated by PayPal after a successful payment:

```rb
And(/^Paypal updates our endpoint$/) do
  body = {"CONTEXT"=>"wtgSziM4C5x0SI-9CmKcv2vkSeTLK5P_g6HqzC__YTYkcqziFNcB84p79Ja", "txn_type"=>"subscr_signup", "subscr_id"=>"I-PEG1KSWM8TBU", "last_name"=>"buyer", "residence_country"=>"GB", "mc_currency"=>"GBP", "item_name"=>"Premium", "business"=>"sam-facilitator@agileventures.org", "recurring"=>"1", "payer_status"=>"verified", "payer_email"=>"sam-buyer@agileventures.org", "first_name"=>"test", "receiver_email"=>"sam-facilitator@agileventures.org", "payer_id"=>"9EG5X4H5DJJW4", "reattempt"=>"1", "item_number"=>"not logged in", "subscr_date"=>"10:07:19 Dec 12, 2016 PST", "charset"=>"windows-1252", "period1"=>"7 D", "mc_amount1"=>"0.00", "period3"=>"1 M", "mc_amount3"=>"10.00", "auth"=>"A31jSI5vY44zpPcQlAUk8WdibsJJT72rGx6ptiGPil6MG30OuCoFtHJ38.CJmmBQ.NNbZg.XEaWj298bVa5FZIw", "form_charset"=>"UTF-8"}
  
  post subscriptions_path, body
end
````

In the above I'd copied and pasted in the set of params I'd seen from a sandbox test of PayPal when I hooked it on the debugger locally.  I couldn't use Capybara to simulate a POST request so I used a rack test method instead.  I also deleted the old custom PayPal endpoint; the one we'd used to validate that anyone would actually sign up by PayPal.  This custom endpoint had confused us when refactoring the Premium Rails controller, so it was good to see the back of it.  Our routes for subscriptions went from this:

```rb
  match '/subscriptions/paypal' => 'subscriptions#paypal', :via => [:get]
  match '/subscriptions/upgrade' => 'subscriptions#upgrade', :via => [:put]
  resources :subscriptions
```

to this:

```rb
  match '/subscriptions/upgrade' => 'subscriptions#upgrade', :via => [:put]
  resources :subscriptions
```

The response from PayPal, simulated by `post subscriptions_path, body`, was now going to hit the `create` route generated by the `resources :subscriptions` command.  The key thing here is trying to have the app be RESTful; to try and coordinate everything in terms of the basic CRUD actions on a "resource".  Custom endpoints like the `paypal` one I just removed and the `upgrade` one that I want to remove next are all well and good for a quick fix, but they are technical debt, as was made clear recently.  It might seem more complicated in this case to have both Stripe and PayPal work through a single `subscription#create` method, but it helps get our business entities in our domain model clear.  What's happening here, independently of the financial mechanism that our members contribute through, is that our users are setting up a Subscription.  There are a set of common things we want to happen when a member starts a Subscription, so it makes sense for it to be done in a coherent way through the CRUD C ('Create') on the SubscriptionsController.  The consistency of this is important for navigation of the codebase by future coders, including ourselves.

Not that there wasn't some short term pain to be had here in the form of taking the existing Stripe specific controller method and having it support both PayPal and Stripe.  To start with it looked like this:

```rb
  def create
    @user = User.find_by_slug(params[:user])
    @plan = Plan.new params[:plan]
    @sponsored_user = sponsored_user?

    update_user_to_premium(create_customer, @user)
    send_acknowledgement_email

  rescue Stripe::StripeError => e
    flash[:error] = e.message
    redirect_to new_subscription_path
  end
```

I poked through it with the debugger, driving from the new cucumber step that simulated the completed PayPal payment.  It required quite a few changes, but eventually I got to:

```rb
  def create
    @user = detect_user
    @plan = detect_plan
    @sponsored_user = sponsored_user?

    create_stripe_customer unless paypal?

    update_user_to_premium(@user)
    send_acknowledgement_email

  rescue Stripe::StripeError => e
    flash[:error] = e.message
    redirect_to new_subscription_path
  end
```

It was not ideal and ripe for extraction into a service object that could be tested separately.  However it was working despite the distractions of having to do a PostgreSQL db upgrade, and set up a custom mechanism for checking the contents of the page after the PayPal rack test post since Capybara could no longer see the output.  The method above didn't look too bad, but I was now left with messy `if/else` statements in private methods throughout the controller, e.g. 

```rb
  def update_user_to_premium(user)
    user ||= current_user
    return unless user
    if paypal?
      UpgradeUserToPremium.with(user, Time.now, params['payer_id'], PaymentSource::PayPal, plan_class)
    else
      UpgradeUserToPremium.with(user, Time.now, @stripe_customer.id, PaymentSource::Stripe, plan_class)
    end
  end
```

I could see a pattern here.  I could avoid all these checks for PayPal, with an adaptor or facade that wrapped the params something like this:

```rb

class ThirdPartyPaymentCompletionResults

  def initialize(params)
    @params = params
  end
  
  def paypal?
    @params['item_number']
  end
end 

class StripePaymentCompletionResults < ThirdPartyPaymentCompletionResults

end

class PaypalPaymentCompletionResults < ThirdPartyPaymentCompletionResults

  def id
    params['payer_id']
  end

end
```

Although looking at the above sketch I can see that I want to put this in a module and maybe use a factory method to have an entity of the correct type created, e.g. 

```rb

module ThirdPartyPayment

  class Result
    def self.process_results(params)
      @params = params
      return PayPal.new(params) if paypal?
      Stripe.new(params)
    end
    
    private
  
    def self.paypal?
      @params['item_number']
    end
  end

  class Stripe < Result
    def intialize(params)
      @params = params
      @stripe_customer = create_stripe_customer
    end
    
    def id
      @stripe_customer.id
    end
    
    def payment_source
      PaymentSource::Stripe
    end

  end

  class Paypal < Result
    def intialize(params)
      @params = params
    end

    def id
      @params['payer_id']
    end
    
    def payment_source
      PaymentSource::PayPal
    end
  end

end 
```

and then the `update_user_to_premium` method and others could collapse back to something like:

```rb
  def update_user_to_premium(user, result)
    user ||= current_user
    return unless user
    UpgradeUserToPremium.with(user, Time.now, result.id, result.payment_source, plan_class)
  end
```

Now that was a rough code sketch above - I'll have to work out the kinks, but I can see how it might clean up the controller.  There are other domain entities in play here such as the set of PaymentSources that we already created and the UpgradeUserToPremium service.  It's tempting to jump in and start refactoring away, but I heed Sandi Metz's advice about looking ahead to what other refactorings are coming.  I plan to immediately follow this work with a series of tests to check that all the sad paths work, that we can have PayPal supported sponsorships, and support generic types of plans.  All these are going to put pressure on the controller and the domain model that I don't necessarily understand as well as I would like.  I don't want to be caught burning a lot of time prematurely refactoring in one way only to discover that I need to fall back.

This is a point of agony where I'm embarressed by the `if/else` statements and I want to clean them up as quickly as possible, but I also want to deliver all the payment features as quickly as possible.  I'm carefully watching the level of technical debt ...  At least the routes got a little cleaner with these changes.  My belief in the the RESTful CRUD manipulation of resources has re-doubled and I'm looking to a future vista where we have a robust domain model with entities like Subscriptions and Plans and PaymentSource matches the needs of our charity enterprise, and our technology is in the service of our process rather than the other way round :-)

###Related Videos:

* ["Martin Fowler" Scrum](https://www.youtube.com/watch?v=t1A_hI7-X0c)
* ["Kent Beck" Scrum](https://www.youtube.com/watch?v=W3_ISEYsTUA)
* [Solo on WebSiteOne](https://www.youtube.com/watch?v=Ky49eCl_7EA)

