I'm at sixes and sevens today.  Bit of an intense afternoon/evening yesterday running an agile workshop for the digital charities group.  That went pretty well.  I could be blogging about it, but I've [blogged about the previous ones](https://medium.com/agileventures/agile-project-management-for-nonprofits-e6001e13304b), and I'd say this one wasn't so very different.  Still, basically on time this morning, but then my neighbour needs help replacing a window, and I forget I've got a WebDev mob at 9:30am, so no time for breakfast, but we do get a new trialist in the session, and that feels good.  That done I splash around, get some github code reviewed, sort out social media, run the martin fowler scrum, but don't feel like I'm making much progress.  There's a blob of seemingly open ended stuff I need to do for organising our AGM conference, and doing the AV accounts.  Brain doesn't feel in the right place for those right now, but can't keep putting off indefinitely.

Off the back of the scrum I'm trying to deploy the latest fix to WebsiteOne.  It's exciting to see updates of folks joining projects, but we need to ensure that they have the ability to unsubscribe from emails they receive.  Deploying that uncovered a variety of issues.  One of our new members managed to accidentally merge their own PR ... we have that issue because anyone we add to the WebSiteOne team to be able to be assigned to tickets in waffle can then merge PRs.  Other projects like MetPlus have a separate repo for their waffle and their codebase in order to avoid this issue.

The real problem is that we don't want to put new devs in this position where they can accidentally merge when they are not intending to.  The problem here is that unless we force the repos back to an old commit and then rerun all the PRs (which might require extra effort from the devs - I'm not sure).  The problem is that we have some junk files in the repo and the latest master history is now polluted with merges.  However I don't think we have the spare time to muck about rolling back and forth in order to keep a super smart git history.  It's great to have, and is really helpful occasionally, but this clutter will roll off the horizon before too long, and perhaps it's a good learning experience all round.

In particular I notice the new functionality from the new user and the other key fixes we were trying to roll out are all working on production, so I think I have to proritise the end user experience over the developer experience here.  Lots to sort out.  Gosh I wish that someone had me and all the other websiteone devs on modern software development salaries to maintain and sort all of this :-)
