---
title: MultiDimensional Learning Economics
date: 2016-10-07
tags: Mentive edX 
author: Sam Joseph
---

This weekend I ran my first Mentive class.  Mentive is an educational startup that provides tutoring for a number of different Massively Open Online Courses (MOOCs), including our “Agile Development using Ruby on Rails”.  We’re currently running the part 2 or “advanced” course that corresponds to the second half of the UCBerkeley Software Engineering class.  It’s my first time trying out the Mentive system which uses GotoMeeting rather than Hangouts.  Myself and John Rofrano are leading tutorial sessions through Mentive on this run.  We’ve both got a couple of students signed up.  I think the numbers might be down for a couple of reasons; one, we removed all the deadlines on the “advanced” course as part of a move towards taking the classes completely self-paced next year.  That probably reduces the sense of urgency as regards sign up.  Also, I hear that Mentive increased their prices, and they may have tipped a limit that we’re also seeing with AgileVentures PremiumPlus.  I’ve had conversations with a few people that the £100 a month price tag on PremiumPlus is beyond their means.  Tweaking those prices and offerings are ultimately what makes all the difference perhaps.

So anyway, I usually have a rule of not doing any work on the weekends, but I had agreed to take a class on Saturday evenings, since weekday evenings are challenging for me due to early starts to support the daily school run.  Also I’m keen to support Mentive, understand their platform, and furthermore I need to bring in some cash while AgileVentures works its way out of the red.  So I’m running my Mentive class at 8:30pm UTC on Saturday evenings, which makes it practical for anyone from UTC-7 to UTC+2 to attend, which encompasses most of the Americas, Europe and Africa.  I just had one student on this first instance, and so they got a focused one to one session.  We talked about how they had found the previous course, and what they were hoping to get out of this advanced course.  They shared that RSpec had been challenging and I reflected that they weren’t alone.  The common refrain from the different instructors using the MOOC materials around the world was that people tended to get Cucumber, but struggled with RSpec.  So in the session we worked through driving the creation of a small domain model of plain old Ruby objects via RSpec tests, and then did the same for a small Rails app that would use that domain model, driving the creation of an API with RSpecRails tests.  My student seemed pretty pleased with that, and I’m looking forward to developing that further in future sessions.

Mentive classes are intended to support up to 20 students, and it would be interesting to see if the same guided app creation technique would work with a larger class, keep them engaged and so forth.  Doing it with a single student is not so far removed from what we do in PremiumPlus pairing sessions.  On Saturday my student was on a tablet, and so couldn’t easily type code, but I set up pairing intervention elements by stopping at points and asking my student what they thought I should do next, and that seemed to work well.  Obviously since it was only a single student I was able to tailor what we did and the pace directly to their preference.  Something that’s much more difficult to do with a larger group.

The big difference between Mentive sessions and AgileVentures Premium/PremiumPlus, is that everything AgileVentures is OpenSource and "in context".  All the coding work done with AgileVentures is on a real open source code base, has some relation to the need of a real charity customer or user base.  Of course some learners would much rather work on a more tightly constrained problem or exercise.  Hence the profusion of study tools like CodeWars, CodeAcademy, HackerRank and so forth.  Even the majority of the ADuRoR course uses a toy application, although I really do love the legacy assignments which take an older version of the oldest OpenSource RoR project "publify" (when it was called typo), and sets the students to do bugfixes and add features fully in context of a working legacy app.  I think that's an inspired choice on the part of Armando Fox, Dave Patterson and the Berkeley TAs who worked on the assignment with them.

It's working on that assignment myself several years ago that made me want to do *all* my learning in context.  It's why I wanted AgileVentures to exist, a place that could help you do all your learning in context, and contribute to the greater good at the same time.  Of course systems like GitHub, BitBucket and SourceForge already provide a huge vista of OpenSource projects for ongoing learning, but a learner is often thankful for a pathway through the complexity.

Now AgileVentures doesn't provide as much of a pathway as FreeCodeCamp or CodeCademy or even CodeWars, and all of these still have some beautifully unstructured portions.  We're still working on getting the balance right at AgileVentures, and also the economic model to make is sustainable.  It seems like both CodeWars and CodeCademy are leaning towards being solutions to help employers find job candidates, and FreeCodeCamp is operating as a free for all non-profits and developers, while charging companies a hiring fee when FCC developers are placed (like many bootcamps).

AgileVentures at the moment is closer to edX and Mentive in that individual learners are paying for additional services.  Actually AgileVentures is a charity so you could also look at it that every premium member is a sponsor who's getting benefits KickStarter or Patreon style.  This is where the multidimensional economics of learning comes in.  What are people willing to contribute for what kind of perk or service?  We've had very few sign ups for PremiumPlus, but people are happy to pay a lot more money for a bootcamp, and many people pay similar amounts for MOOC course certificates.  

There seems to be a prevaling view that taking courses equals education.  I guess I'm drinking my own cool-aid here, but I feel like learning comes from doing.  More and more courses are hands on these days, but I'm skeptical of the learning benefits of watching lots of lectures, or even toy exercuses.  I guess it's a relatively low impact way of floating your brain in some of the domain concepts.  Not everyone wants to become an expert in a particular field.  However if you're in a rush to skill up and you can take the emotional pain of making lots of mistakes (really valuable for learning), then I think diving in to a real project is the way to go.

AgileVentures tries to create a safe space to fail on an open source project with a real customer.  I don't know how we can convey that more strongly.  What I've learnt from all the different educational environments I've taught in (university, MOOC, bootcamp) is that almost everyone hates failure, and that many of us would much rather spend a lot of time watching videos and reading rather than holding our feet to the learning fire.

It was holding my feet to the learning fire that got me my AstroPhysics degree.  It was so tempting to keep reading, and re-summarizing my notes.  It wasn't until I forced myself to repeatedly answer old exam questions that I got my exam technique down and got the first that got me on to higher education.  Not that I was ever really satisified with myself during my first masters and PhD.  It still felt trivial and isolated from the rest of the world.  Part of the problem was that I was studying in the dark ages before search engines like Google connected learners with the rest of the world.

So anyhow, I'm thinking we need a new Premium tier for AgileVentures.  What I notice (and I've blogged about before) is how so many people prefer to ask me questions 121 rather than in group chat; and it takes a lot of persuasion before people will post publicly, and it's rare that it becomes their default.  Some individuals will keep on asking for one to one help, even though there's no financial incentive for me to help them.  I don't want to come across as mercenary, but I've put in thousands of volunteer hours and a lot of my own savings to supporting learning online.  I've got to put up some toll booths to feed my kids.

I guess some people are used to coming from a state education system where they can get 121 support from their instructors if they press hard enough.  I wonder if people realise that the time I spend answering their 121 question takes up time that I could be using to earn money to feed my kids?  And my three boys eat like horses! :-)  Maybe they realise and don't care?  Maybe they're just not thinking about it; they're just focused on their own question, trying to solve their own problem.

I want to get learners comfortable about asking in public so that others can benefit.  If they ask in group chat on AgileVentures it increases the activity in the community, and the community value keeps people around, and the rising tide lifts all the boats.  I could devote all my time to answering 121 questions, and I might get a few thanks from people, and I might learn a few things, but it's not enough to feed my kids.  It makes me think that the new AgileVentures premium tier should be called "121", cost about £25 a month, and get you an assigned mentor who can answer your questions on 121 chat.  And maybe a £50 a month version called Premium on Air that gets you an hour of hangout time.  We'll have to work out the details.  We need to avoid changing and tweaking too much or we confuse people, muddy the water.  It really is a complex multidimensional economics of learning problem ... 

