It was an exciting Friday as our first sponsored Premium member made their first pull request against the LocalSupport open source project.  We'd onboarded a Kenyan student before the break having received sponsorship for a single AgileVentures Premium support plan from an anonymous US based donor.  The Kenyan student had completed a coding bootcamp, but was still looking for experience on some real world projects.  They were unfortunately unwell with malaria over the break and couldn't get started until the new year.  A couple of weeks back we'd managed to get them set up with the LocalSupport code base on their linux machine, which was a great step forward.

Onboarding to our open source projects in AgileVentures is still much more complicated than we'd like.  In the ideal world, perhaps, we'd be able to drop folks directly into a working environment with all the tests passing, ready to start coding on a bug, chore or feature.  We've tried things like vagrant and docker to have developers start from a virtual machine with everything set up already, but while that puts all the needed components in one place, there's then having new folks understand the vagrant/docker virtual machine concept.   Although maybe we just haven't put enough energy and ingenuity into getting to the bottom of the problem?  

The virtual machine that the MOOC used to distribute created a standard default, but lead to the code running more slowly on the developer machine and was difficult to download a big chunk over spotty internet connections.  That said I don't have firm data on that.  The vagrant/docker approaches made the downloads lighter weight, but then there were wrinkles regarding being able to edit the code in editors on the host machine.  Where possible we'd love for developers to be able to stay with their preferred developing environment.  That said, C9 is an interesting alternative that some have used with success, although there are space limitations there.

Maybe I'm at fault for having a fast machine and not experiencing the pain of setup and install frequently enough.  Maybe the pain of the install experience has an important filtering effect on those with lower levels of commitment, and maybe seeing how the sets of connected libraries get installed is useful for understanding the project dependencies.  I really don't know.  I know my kids (8,8 and 11) would have no patience for it, and they are learning to code using CodeCombat, where all coding takes place in the browser like CodeSchool, CodeAcademy and CodeWars.

Maybe there's a shortcut that I'm missing, or maybe I've just been mis-directing my efforts over the last 3 years on LocalSupport and other projects.  I am not sure.  What we did just do was create a separate #localsuppport-install channel on Slack specifically for giving support on the install process.  There we have managed to help folks through ruby/gem versioning and postgres permission issues.  Those two seem to be common stumbling blocks.  I'm hoping we can keep improving the docs.  Has trying to migrate from GitHub wiki to docs in the repo helped or hindered? I'm not sure.

So the first breakthrough was getting the sponsored Kenyan student (and a few others) through the install process.  However having got everything installed and all the tests passing, the question was what next?  I'm trying to write more and more about how we work with Pivotal Tracker to manager the work on the project.  There's a clear flow evolving in my mind of the appropriate strategy to really engage with the project:

1. Look through all the existing pull requests (commenting if so inclined)
2. Look though all the current tickets (reaching out to those working on them to offer help if so inclined)
3. Look through all the backlog tickets (posting questions about any you are interested in working on)
4. Looking through the icebox tickets (starting votes on any that you are interested in)

This may not be the best process for every individual.  Perhaps some people should best start slowly familiarizing themselves with the codebase, reading all the documentation, or similarly for the technology stack and any components used.  The idea behind the above pattern is that this is the "rince-and-repeat" that one would use to repeatedly contribute to a project.  reading code and documentation can be interleaved anywhere, but it seems to me that interaction with the existing project team is critical to avoid duplicated effort, and being able to benefit from the team's existing knowledge.  In each of the above if you don't find a hook with an existing team members work you move on to the next step, where eventually you'll end up starting a vote and alerting the rest of the team to your interest in working on something.

Of course looking through the chunks of code in the pull-request may be disorienting and confusing for the new developer, but this is a critical skill.  Maybe in aggregate just looking at other folks submitted slivers of code and comments on them from the rest of the team will put more folks off than pull them into the process?  I'm not sure :-) I just keep following my personal maxim that the learning should replicate the actual doing as closely as possible.  Scaffolding and support, yes!  Simplification, yes!  But still as realistic as possible, and in bite sized chunks for quick feedback and feelings of progress.

I'd outlined the above in various fashions (docs and Slack posts) but there wasn't any activity for a while from our new folks.  Here's where the Premium support made the difference.  Under other circumstances I couldn't really justifying additional outreach for those who weren't taking the initiative.  I reached out to the sponsored member and suggested a low-complexity ticket that might be a good place to start.  That seemed to do the trick.  We had a vote in the main #localsupport channel on the ticket, which involved some refactoring of Cucumber step definitions to make their meaning more explicit.  Most of us voted 1, while the sponsored member voted 2 putting them on the spot to explain their reasoning.  That was perhaps unfortunate.  New folks will often want to remain in the background of the process, but that's partly what the voting is about, to identify differences in assumptions which we might miss without the explicit vote.

It was also highlighting failures on my part to really explain the details of the chore in the ticket.  Fortunately the Slack allowed me to explain, and I quickly updated the ticket and got us to the point where we were all agreeing on a 1 and we now had a voted chore for the sponsored member to work on.  And yes, I know that Pivotal doesn't vote on chores and bugs, but we realized a while ago that in an open source project with high churn that velocity measurements are less important that highlighting the complexity levels of chores and bugs to new folks.  Anyhow, with some help from a mentor the sponsored member got an initial pull request in, on which we were able to give feedback, and was then improved upon to get the CI green and handle merge conflicts and so on.

Only time will truely tell, but from the chat in group and private channels it seemed like it was all a huge confidence boosting experience.  Just making a pull-request itself and handling things like CI and merge conflicts is more than task enough itself in the first instance; let alone trying to BDD a new feature from scratch or fix a complex bug.  By taking one of our relatively simple refactoring tickets we were able to get a new person understanding our project flow, and in relatively short order getting the satisfaction of having contributed to an open source project.

We'll see how it goes, but I'd love to keep rinseing and repeating this with the sponsored member, helping building their confidence up on gradually more complex tasks.  And then at the bigger scale I'd love to be doing this for more and more folks around the world.  Think you could spare Â£10 (~$12.50) a month to help a developer in a resource-challenged part of the world get the help and support I describe above?  Help someone in another country learn modern OS development skills on real projects and make a real difference in the world. See http://www.agileventures.org/sponsorship for more details
